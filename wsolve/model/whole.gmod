/* DO NOT MODIFY UNLESS YOU KNOW WHAT YOU ARE DOING
 *
 * This file is part of wsolve.
 * 2019 (c) Maximilian Azendorf
 */

set PARTICIPANTS;
set WORKSHOPS;
set SLOTS;

param null_participant symbolic := 'NULL';
param null_slot symbolic := 'NULL';

#set OPT_PARTICIPANTS := PARTICIPANTS union {null_participant};
set OPT_SLOTS := SLOTS union {null_slot};

param min_participants {WORKSHOPS} > 0, integer;
param max_participants {w in WORKSHOPS} >= min_participants[w], integer;
param conductor {w in WORKSHOPS} symbolic in PARTICIPANTS;

param preference {PARTICIPANTS, WORKSHOPS} >= 0, <= card(WORKSHOPS), integer;
param min_pref := min{p in PARTICIPANTS, w in WORKSHOPS} preference[p,w];
param max_pref := max{p in PARTICIPANTS, w in WORKSHOPS} preference[p,w];
param allowed_preference, integer, >= min_pref, <= max_pref, default max_pref;
param pref_exp >= 0, default 3;

var X{PARTICIPANTS, WORKSHOPS, OPT_SLOTS} binary;
var IsInSlot{WORKSHOPS, OPT_SLOTS} binary;
var IsInWorkshop{PARTICIPANTS, WORKSHOPS} binary;
var UsesPreference{min_pref..max_pref} binary;
    
s.t. impl_is_in_slot{p in PARTICIPANTS, w in WORKSHOPS, s in SLOTS}:
    IsInSlot[w,s] >= X[p,w,s];

s.t. impl_is_in_workshop{p in PARTICIPANTS, w in WORKSHOPS, s in OPT_SLOTS}:
    IsInWorkshop[p,w] >= X[p,w,s];

s.t. impl_uses_preference {p in PARTICIPANTS, w in WORKSHOPS}:
    UsesPreference[preference[p,w]] >= IsInWorkshop[p,w];
    
s.t. uses_preference_transitivity {i in min_pref..(max_pref-1)}:
    UsesPreference[i] >= UsesPreference[i+1];
       
s.t. uses_preference_limit {i in min_pref..max_pref}:
    UsesPreference[i] <= if i > allowed_preference then 0 else 1;
     
s.t. only_in_one_slot{w in WORKSHOPS}:
    sum{s in OPT_SLOTS} IsInSlot[w,s]  = 1;
    
s.t. workshop_participants_constraint{w in WORKSHOPS}:
    min_participants[w],  <= sum{p in PARTICIPANTS} IsInWorkshop[p,w]  <= max_participants[w];
     
s.t. one_workshop_per_slot{p in PARTICIPANTS, s in SLOTS}:
    sum{w in WORKSHOPS} X[p,w,s]  = 1;
    
s.t. no_null_slot_workshop{p in PARTICIPANTS}:
    sum{w in WORKSHOPS} X[p,w,null_slot]  = 0;
    
s.t. conductor_is_in_own_workshop{w in WORKSHOPS}:
    IsInWorkshop[conductor[w], w]  = 1;
        
minimize goal: 
    (sum{w in WORKSHOPS, p in PARTICIPANTS} (IsInWorkshop[p,w] * ((preference[p,w]+1)^pref_exp) / max_pref^pref_exp))
    ;#+ (sum{i in min_pref..max_pref} (card(PARTICIPANTS) * card(WORKSHOPS) * UsesPreference[i]));